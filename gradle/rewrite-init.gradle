initscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2" }
  }
  dependencies { classpath("org.openrewrite:plugin:7.12.1") }
}
rootProject {
  plugins.apply(org.openrewrite.gradle.RewritePlugin)
//  dependencies {
//    rewrite("org.openrewrite.recipe:rewrite-static-analysis:2.14.0")
//  }
  dependencies {
    //rewrite("org.openrewrite.recipe:rewrite-migrate-java")
    rewrite("org.openrewrite.recipe:rewrite-static-analysis")
    rewrite("org.openrewrite.recipe:rewrite-third-party")
    rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:latest.release"))
  }
  rewrite {
    activeRecipe(
      "org.openrewrite.java.RemoveUnusedImports",
      "tech.picnic.errorprone.refasterrules.BugCheckerRulesRecipes",
//      "tech.picnic.errorprone.refasterrules.FileRulesRecipes",
//      "tech.picnic.errorprone.refasterrules.MicrometerRulesRecipes",
//      "tech.picnic.errorprone.refasterrules.SuggestedFixRulesRecipes",
//      "tech.picnic.errorprone.refasterrules.TimeRulesRecipes",
      //"org.apache.kafka.openrewrite.java.AddLicenseHeader", https://github.com/openrewrite/rewrite/issues/5762
      //"org.openrewrite.java.migrate.UpgradeToJava17",
      //"org.openrewrite.java.recipes.JavaRecipeBestPractices",
      //"org.openrewrite.java.recipes.RecipeNullabilityBestPractices",
      //"org.openrewrite.java.recipes.RecipeTestingBestPractices",
      //"org.openrewrite.staticanalysis.CodeCleanup",
      //"org.openrewrite.staticanalysis.CommonStaticAnalysis",
      //"org.openrewrite.staticanalysis.EqualsAvoidsNull",
      //"org.openrewrite.staticanalysis.JavaApiBestPractices",
      //"org.openrewrite.staticanalysis.LowercasePackage",
      //"org.openrewrite.staticanalysis.MissingOverrideAnnotation",
      //"org.openrewrite.staticanalysis.ModifierOrder",
      //"org.openrewrite.staticanalysis.NoFinalizer",
      //"org.openrewrite.staticanalysis.RemoveUnusedLocalVariables",
      //"org.openrewrite.staticanalysis.RemoveUnusedPrivateFields",
      //"org.openrewrite.staticanalysis.RemoveUnusedPrivateMethods",
      //"org.openrewrite.staticanalysis.UnnecessaryThrows",
      //"tech.picnic.errorprone.refasterrules.BigDecimalRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.CharSequenceRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.ClassRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.CollectionRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.ComparatorRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.EqualityRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.JUnitRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.NullRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.OptionalRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.PatternRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.PreconditionsRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.PrimitiveRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.StreamRulesRecipes",
      //"tech.picnic.errorprone.refasterrules.StringRulesRecipes",
    )
    failOnDryRunResults = true
    exportDatatables = true
    exclusions.add("**.GarbageCollectedMemoryPoolTest.java")
    exclusions.add("**.MetadataVersionTest.java")
  }
  afterEvaluate {
    if (repositories.isEmpty()) {
      repositories {
        mavenCentral()
      }
    }
  }
}
