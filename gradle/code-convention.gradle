/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.opensearch.gradle.BuildPlugin

import static java.lang.System.getenv

allprojects {
  plugins.withType(BuildPlugin).whenPluginAdded {
    project.apply plugin: "org.openrewrite.rewrite"
    rewrite {
      activeRecipe("org.opensearch.openrewrite.recipe.CodeCleanup")
      configFile = file("$rootDir/gradle/code-convention.yml")
      exclusions.add("**OpenSearchTestCaseTests.java")
      exclusions.add("**/simple-bulk11.json")
      exclusions.add("**/simple-msearch5.json")
      exclusions.add("**AbstractBenchmark.java")
      exclusions.add("**ScriptClassPathResolutionContext.java")
      exclusions.add("**StarTreeMapper.java")
      exclusions.add("**SearchAfterIT.java")
      failOnDryRunResults = true
    }
    repositories {
      mavenCentral()
    }
    dependencies {
      rewrite("org.openrewrite.recipe:rewrite-rewrite:0.9.0")
      rewrite("org.openrewrite.recipe:rewrite-static-analysis:2.12.0")
    }
    tasks {
      if (getenv("dogFoodDev")) {
        assemble {
          dependsOn(rewriteRun)
        }
      }
      if (!getenv("skipDogFood")) {
        check {
          dependsOn(rewriteDryRun)
        }
      }
    }
  }
}
